require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/sensors", type: :request do
  let(:valid_attributes) do
    {
      label: "CalneAQM005-A3a (CTC Funded)",
      model: "Design A3a",
      node_id: 6_719_832,
      pm_sensor_id: 55_678,
      temp_rh_sensor_id: 55_679,
      community_registration_id: 29_869,
      active: true
    }
  end

  let(:invalid_attributes) do
    {
      label: "CalneAQM006-A3a",
      model: "Design A3a",
      node_id: "sensor6",
      pm_sensor_id: "pm55678",
      temp_rh_sensor_id: "temprh55679",
      community_registration_id: nil,
      active: true
    }
  end

  describe "GET /index" do
    it "renders a successful response" do
      Sensor.create! valid_attributes
      get sensors_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      sensor = Sensor.create! valid_attributes
      get sensor_url(sensor)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_sensor_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "render a successful response" do
      sensor = Sensor.create! valid_attributes
      get edit_sensor_url(sensor)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Sensor" do
        expect do
          post sensors_url, params: { sensor: valid_attributes }
        end.to change(Sensor, :count).by(1)
      end

      it "redirects to the created sensor" do
        post sensors_url, params: { sensor: valid_attributes }
        expect(response).to redirect_to(sensor_url(Sensor.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Sensor" do
        expect do
          post sensors_url, params: { sensor: invalid_attributes }
        end.to change(Sensor, :count).by(0)
      end

      it "renders an unprocessable entity response" do
        post sensors_url, params: { sensor: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) do
        {
          label: "CalneAQM006-A3a (CTC Funded)"
        }
      end

      it "updates the requested sensor" do
        sensor = Sensor.create! valid_attributes
        patch sensor_url(sensor), params: { sensor: new_attributes }
        sensor.reload
        expect(sensor.label).to eq("CalneAQM006-A3a (CTC Funded)")
      end

      it "redirects to the sensor" do
        sensor = Sensor.create! valid_attributes
        patch sensor_url(sensor), params: { sensor: new_attributes }
        sensor.reload
        expect(response).to redirect_to(sensor_url(sensor))
      end
    end

    context "with invalid parameters" do
      it "renders an unprocessable entity response" do
        sensor = Sensor.create! valid_attributes
        patch sensor_url(sensor), params: { sensor: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested sensor" do
      sensor = Sensor.create! valid_attributes
      expect do
        delete sensor_url(sensor)
      end.to change(Sensor, :count).by(-1)
    end

    it "redirects to the sensors list" do
      sensor = Sensor.create! valid_attributes
      delete sensor_url(sensor)
      expect(response).to redirect_to(sensors_url)
    end
  end
end
